version: '3.4'
services:
  app:
    # Build at dd-trace-rb level to copy in current code
    # and use it as the `ddtrace` gem.
    build:
      context: ../../..
      dockerfile: integration/apps/ruby-pg/Dockerfile-ci
      args:
        BASE_IMAGE: ${APP_IMAGE}
    depends_on:
      - ddagent
      - db-test
    environment:
      - BUNDLE_GEMFILE=/app/Gemfile
      - DD_AGENT_HOST=ddagent
      - DD_METRIC_AGENT_PORT=8125
      - DD_TRACE_AGENT_PORT=8126
      - DD_HEALTH_METRICS_ENABLED=true
      - DD_SERVICE=acme-ruby-pg
      - DD_PROFILING_ENABLED=true
      # Use these to choose what is run
      - DD_DEMO_ENV_PROCESS=pg
      - DD_DEMO_ENV_FEATURES=tracing
    env_file:
      - .env
    stdin_open: true
    tty: true
  ddagent:
    image: datadog/dd-apm-demo:agent
    environment:
      - DD_APM_ENABLED=true
      - DD_PROCESS_AGENT_ENABLED=false
      - DD_BIND_HOST=0.0.0.0
      - DD_API_KEY=00000000000000000000000000000000
      - LOG_LEVEL=DEBUG
      - DD_LOGS_STDOUT=yes
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
    expose:
      - "8125/udp"
      - "8126"
  db-test:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
  # Build at dd-trace-rb level to copy in current code
  # and use it as the `ddtrace` gem.
  integration-tester:
    build:
      context: ../../..
      dockerfile: integration/apps/ruby-pg/Dockerfile-ci
      args:
        BASE_IMAGE: ${APP_IMAGE}
    command: bin/test
    depends_on:
      - app
      - db-test
    env_file:
      - .env
    # volumes:
    #   - .:/app
    #   - ../../images/include:/vendor/dd-demo
    #   - ../../..:/vendor/dd-trace-rb
